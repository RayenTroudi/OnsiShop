generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  password     String
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  carts        Cart[]
  comments     Comment[]
  ratings      Rating[]
  reservations Reservation[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  handle      String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id               String     @id @default(cuid())
  name             String     @default("")
  handle           String     @unique
  title            String
  description      String?
  price            Float
  stock            Int        @default(0)
  image            String?
  compareAtPrice   Float?
  availableForSale Boolean    @default(true)
  categoryId       String?
  tags             String?
  images           String?
  variants         String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  cartItems        CartItem[]
  comments         Comment[]
  category         Category?  @relation(fields: [categoryId], references: [id])
  ratings          Rating[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  sessionId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  variantId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, variantId])
}

model SiteContent {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NavigationItem {
  id          String   @id @default(cuid())
  name        String
  title       String
  url         String
  order       Int      @default(0)
  isPublished Boolean  @default(true)
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMedia {
  id          String   @id @default(cuid())
  platform    String
  title       String
  url         String
  iconUrl     String?
  order       Int      @default(0)
  isPublished Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MediaAsset {
  id        String   @id @default(cuid())
  filename  String
  url       String
  alt       String?
  type      String
  section   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id          String   @id @default(cuid())
  userId      String
  fullName    String
  email       String
  phone       String
  street      String
  city        String
  zipCode     String
  country     String
  notes       String?
  status      String   @default("pending")
  totalAmount Float
  items       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  productId String
  userId    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

model Rating {
  id        String   @id @default(cuid())
  productId String
  userId    String
  stars     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}
